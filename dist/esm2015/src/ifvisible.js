/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ STATUS_ACTIVE = "active";
const /** @type {?} */ STATUS_IDLE = "idle";
const /** @type {?} */ STATUS_HIDDEN = "hidden";
let /** @type {?} */ DOC_HIDDEN;
let /** @type {?} */ VISIBILITY_CHANGE_EVENT = void 0;
export var Events;
(function (Events) {
    const /** @type {?} */ store = {};
    let /** @type {?} */ setListener;
    /**
     * @param {?} event
     * @param {?} callback
     * @return {?}
     */
    function attach(event, callback) {
        if (!store[event]) {
            store[event] = [];
        }
        // console.log("seko");
        store[event].push(callback);
    }
    Events.attach = attach;
    /**
     * @param {?} event
     * @param {?=} args
     * @return {?}
     */
    function fire(event, args) {
        if (store[event]) {
            store[event].forEach((callback) => {
                callback(...args);
            });
        }
    }
    Events.fire = fire;
    /**
     * @param {?} event
     * @param {?} callback
     * @return {?}
     */
    function remove(event, callback) {
        if (store[event]) {
            store[event] = store[event].filter((savedCallback) => {
                return callback !== savedCallback;
            });
        }
    }
    Events.remove = remove;
    /**
     * @param {?} element
     * @param {?} event
     * @param {?} callback
     * @return {?}
     */
    function dom(element, event, callback) {
        if (!setListener) {
            if (element.addEventListener) {
                setListener = function (el, ev, fn) {
                    return el.addEventListener(ev, fn, false);
                };
            }
            else if (typeof element["attachEvent"] === "function") {
                setListener = function (el, ev, fn) {
                    return el.attachEvent("on" + ev, fn, false);
                };
            }
            else {
                setListener = function (el, ev, fn) {
                    return el["on" + ev] = fn;
                };
            }
        }
        return setListener(element, event, callback);
    }
    Events.dom = dom;
})(Events || (Events = {}));
/**
 * @record
 */
export function IdleInfo() { }
function IdleInfo_tsickle_Closure_declarations() {
    /** @type {?} */
    IdleInfo.prototype.isIdle;
    /** @type {?} */
    IdleInfo.prototype.idleFor;
    /** @type {?} */
    IdleInfo.prototype.timeLeft;
    /** @type {?} */
    IdleInfo.prototype.timeLeftPer;
}
export class Timer {
    /**
     * @param {?} ifvisible
     * @param {?} seconds
     * @param {?} callback
     */
    constructor(ifvisible, seconds, callback) {
        this.ifvisible = ifvisible;
        this.seconds = seconds;
        this.callback = callback;
        this.stopped = false;
        this.start();
        this.ifvisible.on("statusChanged", (data) => {
            if (this.stopped === false) {
                if (data.status === STATUS_ACTIVE) {
                    this.start();
                }
                else {
                    this.pause();
                }
            }
        });
    }
    /**
     * @return {?}
     */
    start() {
        this.stopped = false;
        clearInterval(this.token);
        this.token = setInterval(this.callback, this.seconds * 1000);
    }
    /**
     * @return {?}
     */
    stop() {
        this.stopped = true;
        clearInterval(this.token);
    }
    /**
     * @return {?}
     */
    resume() {
        this.start();
    }
    /**
     * @return {?}
     */
    pause() {
        this.stop();
    }
}
function Timer_tsickle_Closure_declarations() {
    /** @type {?} */
    Timer.prototype.token;
    /** @type {?} */
    Timer.prototype.stopped;
    /** @type {?} */
    Timer.prototype.ifvisible;
    /** @type {?} */
    Timer.prototype.seconds;
    /** @type {?} */
    Timer.prototype.callback;
}
export const /** @type {?} */ IE = (function () {
    let /** @type {?} */ undef, /** @type {?} */
    v = 3, /** @type {?} */
    div = document.createElement("div"), /** @type {?} */
    all = div.getElementsByTagName("i");
    while (div.innerHTML = "<!--[if gt IE " + (++v) + "]><i></i><![endif]-->",
        all[0])
        ;
    return v > 4 ? v : undef;
}());
export class IfVisible {
    /**
     * @param {?} root
     * @param {?} doc
     */
    constructor(root, doc) {
        this.root = root;
        this.doc = doc;
        this.status = STATUS_ACTIVE;
        this.VERSION = '';
        this.idleTime = 30000;
        let /** @type {?} */ BLUR_EVENT = "blur";
        let /** @type {?} */ FOCUS_EVENT = "focus";
        // Find correct browser events
        if (this.doc.hidden !== void 0) {
            DOC_HIDDEN = "hidden";
            VISIBILITY_CHANGE_EVENT = "visibilitychange";
        }
        else if (this.doc["mozHidden"] !== void 0) {
            DOC_HIDDEN = "mozHidden";
            VISIBILITY_CHANGE_EVENT = "mozvisibilitychange";
        }
        else if (this.doc["msHidden"] !== void 0) {
            DOC_HIDDEN = "msHidden";
            VISIBILITY_CHANGE_EVENT = "msvisibilitychange";
        }
        else if (this.doc["webkitHidden"] !== void 0) {
            DOC_HIDDEN = "webkitHidden";
            VISIBILITY_CHANGE_EVENT = "webkitvisibilitychange";
        }
        if (DOC_HIDDEN === void 0) {
            if (IE < 9) {
                BLUR_EVENT = "focusout";
            }
            Events.dom(this.root, BLUR_EVENT, () => {
                return this.blur();
            });
            Events.dom(this.root, FOCUS_EVENT, () => {
                return this.focus();
            });
        }
        else {
            const /** @type {?} */ trackChange = () => {
                if (this.doc[DOC_HIDDEN]) {
                    this.blur();
                }
                else {
                    this.focus();
                }
            };
            trackChange(); // get initial status
            Events.dom(this.doc, VISIBILITY_CHANGE_EVENT, trackChange);
        }
        this.startIdleTimer();
        this.trackIdleStatus();
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    startIdleTimer(event) {
        // Prevents Phantom events.
        // @see https://github.com/serkanyersen/ifvisible.js/pull/37
        if (event instanceof MouseEvent && event.movementX === 0 && event.movementY === 0) {
            return;
        }
        clearTimeout(this.timer);
        if (this.status === STATUS_IDLE) {
            this.wakeup();
        }
        this.idleStartedTime = +(new Date());
        this.timer = setTimeout(() => {
            if (this.status === STATUS_ACTIVE || this.status === STATUS_HIDDEN) {
                return this.idle();
            }
        }, this.idleTime);
    }
    /**
     * @return {?}
     */
    trackIdleStatus() {
        Events.dom(this.doc, "mousemove", this.startIdleTimer.bind(this));
        Events.dom(this.doc, "mousedown", this.startIdleTimer.bind(this));
        Events.dom(this.doc, "keyup", this.startIdleTimer.bind(this));
        Events.dom(this.doc, "touchstart", this.startIdleTimer.bind(this));
        Events.dom(this.root, "scroll", this.startIdleTimer.bind(this));
        // this.focus(wakeUp);
        // this.wakeup(wakeUp);
    }
    /**
     * @param {?} event
     * @param {?} callback
     * @return {?}
     */
    on(event, callback) {
        Events.attach(event, callback);
        return this;
    }
    /**
     * @param {?} event
     * @param {?=} callback
     * @return {?}
     */
    off(event, callback) {
        Events.remove(event, callback);
        return this;
    }
    /**
     * @param {?} seconds
     * @return {?}
     */
    setIdleDuration(seconds) {
        this.idleTime = seconds * 1000;
        this.startIdleTimer();
        return this;
    }
    /**
     * @return {?}
     */
    getIdleDuration() {
        return this.idleTime;
    }
    /**
     * @return {?}
     */
    getIdleInfo() {
        let /** @type {?} */ now = +(new Date());
        let /** @type {?} */ res;
        if (this.status === STATUS_IDLE) {
            res = {
                isIdle: true,
                idleFor: now - this.idleStartedTime,
                timeLeft: 0,
                timeLeftPer: 100
            };
        }
        else {
            let /** @type {?} */ timeLeft = (this.idleStartedTime + this.idleTime) - now;
            res = {
                isIdle: false,
                idleFor: now - this.idleStartedTime,
                timeLeft,
                timeLeftPer: parseFloat((100 - (timeLeft * 100 / this.idleTime)).toFixed(2))
            };
        }
        return res;
    }
    /**
     * @param {?=} callback
     * @return {?}
     */
    idle(callback) {
        if (callback) {
            this.on("idle", callback);
        }
        else {
            this.status = STATUS_IDLE;
            Events.fire("idle");
            Events.fire("statusChanged", [{ status: this.status }]);
        }
        return this;
    }
    /**
     * @param {?=} callback
     * @return {?}
     */
    blur(callback) {
        if (callback) {
            this.on("blur", callback);
        }
        else {
            this.status = STATUS_HIDDEN;
            Events.fire("blur");
            Events.fire("statusChanged", [{ status: this.status }]);
        }
        return this;
    }
    /**
     * @param {?=} callback
     * @return {?}
     */
    focus(callback) {
        if (callback) {
            this.on("focus", callback);
        }
        else if (this.status !== STATUS_ACTIVE) {
            this.status = STATUS_ACTIVE;
            Events.fire("focus");
            Events.fire("wakeup");
            Events.fire("statusChanged", [{ status: this.status }]);
        }
        return this;
    }
    /**
     * @param {?=} callback
     * @return {?}
     */
    wakeup(callback) {
        if (callback) {
            this.on("wakeup", callback);
        }
        else if (this.status !== STATUS_ACTIVE) {
            this.status = STATUS_ACTIVE;
            Events.fire("wakeup");
            Events.fire("statusChanged", [{ status: this.status }]);
        }
        return this;
    }
    /**
     * @param {?} seconds
     * @param {?} callback
     * @return {?}
     */
    onEvery(seconds, callback) {
        return new Timer(this, seconds, callback);
    }
    /**
     * @param {?=} check
     * @return {?}
     */
    now(check) {
        if (check !== void 0) {
            return this.status === check;
        }
        else {
            return this.status === STATUS_ACTIVE;
        }
    }
}
function IfVisible_tsickle_Closure_declarations() {
    /** @type {?} */
    IfVisible.prototype.status;
    /** @type {?} */
    IfVisible.prototype.VERSION;
    /** @type {?} */
    IfVisible.prototype.timer;
    /** @type {?} */
    IfVisible.prototype.idleTime;
    /** @type {?} */
    IfVisible.prototype.idleStartedTime;
    /** @type {?} */
    IfVisible.prototype.root;
    /** @type {?} */
    IfVisible.prototype.doc;
}

//# sourceMappingURL=data:application/json;base64,